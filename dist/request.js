function x(n,a){if(!Array.isArray(n)||typeof a!="function")throw new Error("Invalid arguments. Expected an array and a function.");let e=[],i=[];for(let o of n)a(o)?e.push(o):i.push(o);return[e,i]}function u(n){return{"X-Project-Id":`${n.id}`,Authorization:n==null?void 0:n.bearerToken,"X-Client-Version":n==null?void 0:n.clientVersion}}var c="https://app.apifox.com",h=async(n,a)=>{let{projectConfig:e}=n,{data:i}=await a.fetchJSON(`${c}/api/v1/project-members`,{headers:u(e)}),o=await a.fetchJSON(`${c}/api/v1/api-tree-list`,{headers:u(e)}),d=[],A=[],l=s=>{var t;let f=((t=e.requestMap)==null?void 0:t[s.path])||s.path,r=(i||[]).find(p=>p.user.id===s.responsibleId);return{id:s.id,name:s.name,method:s.method.toUpperCase(),path:s.path,realPath:f,creator:`${(r==null?void 0:r.nickname)||"-"}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${s.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${s==null?void 0:s.id}`}},m=(s,f="")=>{if(s.type!=="apiDetailFolder"||!s.children||s.children.length===0)return;let[r,t]=x(s.children||[],p=>p.type==="apiDetail");if(r.length>0){let p=r.map(R=>l(R.api));A.push(...p),d.push({id:s.key,name:f?`${f}__${s.name}`:s.name,apis:p})}t.forEach(p=>{m(p,s.name)})};return o.data.forEach(s=>{m(s)}),{groups:[{id:"all",name:"\u5168\u90E8\u63A5\u53E3",apis:A},...d]}},S=async(n,a)=>{var s,f,r;let{projectConfig:e,overviewApiResponse:i}=n,o=await a.fetchJSON(`${c}/api/v1/api-details/${i.id}`,{headers:u(e)}),A=(await a.fetchJSON(`${c}/api/v1/api-mocks`,{headers:u(e)})).data.filter(t=>t.apiDetailId===i.id).map((t,p)=>({id:p===0?"default":t.id,name:t.name,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,mockData:JSON.parse(t.response.bodyData),realSceneId:t.id})),l=((s=e.requestMap)==null?void 0:s[i.path])||i.path;return{id:i.id,name:i.name,method:i.method,path:i.path,realPath:l,desc:(f=o==null?void 0:o.data)==null?void 0:f.description,creator:`${i.creator}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${i==null?void 0:i.id}`,mockData:((r=A[0])==null?void 0:r.mockData)||{},scenes:A}},y=(n,a)=>{let{projectConfig:e,apiResponse:i,addScenePayload:o}=n,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(o.mockData)},name:o.name,apiDetailId:i.id,conditions:[],ipCondition:{}};return a.fetchJSON(`${c}/api/v1/api-mocks`,{method:"POST",body:JSON.stringify(d),headers:{...u(e)}},{transformBodyToFormData:!0}).then(A=>({id:A.data.id}))},O=(n,a)=>{let{projectConfig:e,apiResponse:i,sceneResponse:o}=n,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(o.mockData)},name:o.name,apiDetailId:i.id,id:o.id,conditions:[],ipCondition:{}};return a.fetchJSON(`${c}/api/v1/api-mocks/${o.realSceneId}`,{method:"PUT",body:JSON.stringify(d),headers:{...u(e)}},{transformBodyToFormData:!0})},P=(n,a)=>{let{projectConfig:e,sceneResponse:i}=n;return a.fetchJSON(`${c}/api/v1/api-mocks/${i.realSceneId}`,{method:"DELETE",headers:u(e)})};export{y as addApiScene,P as deleteApiScene,S as getApi,h as getProject,O as updateApiScene};
