var d="https://app.apifox.com",l=(p,n)=>{let{projectConfig:r}=p;return n.fetchJSON("api/v1/api-tree-list?locale=zh-CN",{headers:{"X-Project-Id":`${r.id}`}}).then(s=>{let a=[],o=e=>{var t;let i=((t=r.requestMap)==null?void 0:t[e.path])||e.path;return{id:e.id,name:e.name,method:e.method.toUpperCase(),path:e.path,realPath:i,creator:`${e.responsibleId}`,mockUrl:`${r==null?void 0:r.mockPrefixUrl}/${e.path}`,sourceUrl:`${d}/project/${r==null?void 0:r.id}/apis/api-${e==null?void 0:e.id}`,creatorId:e.responsibleId}},c=e=>{var i;return((i=e.children)==null?void 0:i.length)>0&&e.children[0].type==="apiDetail"},A=(e,i="")=>{e.type!=="apiDetailFolder"||!e.children||e.children.length===0||(c(e)?a.push({id:e.key,name:`${i}__${e.name}`,apis:e.children.map(t=>o(t.api))}):e.children.forEach(t=>{A(t,e.name)}))};return s.data.forEach(e=>{A(e)}),{groups:a}})},u=async(p,n)=>{var e,i;let{projectConfig:r,overviewApiResponse:s}=p,o=(await n.fetchJSON(`${d}/api/v1/api-mocks?locale=zh-CN`)).data.filter(t=>t.apiDetailId===s.id).map(t=>({id:t.id,name:t.name,mockUrl:`${r==null?void 0:r.mockPrefixUrl}/${s.path}`,mockData:JSON.parse(t.response.bodyData)})),c=((e=r.requestMap)==null?void 0:e[s.url])||s.url;return{id:s.id,name:s.name,method:s.method,path:s.url,realPath:c,creator:`${s.creatorId}`,mockUrl:`${r==null?void 0:r.mockPrefixUrl}/${s.path}`,sourceUrl:`${d}/project/${r==null?void 0:r.id}/apis/api-${s==null?void 0:s.id}`,mockData:((i=o[0])==null?void 0:i.mockData)||{},scenes:o,creatorId:s.creatorId}};export{u as getApi,l as getProject};
