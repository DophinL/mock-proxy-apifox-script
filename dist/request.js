function h(n,o){if(!Array.isArray(n)||typeof o!="function")throw new Error("Invalid arguments. Expected an array and a function.");let e=[],i=[];for(let p of n)o(p)?e.push(p):i.push(p);return[e,i]}function R(n){return Object.keys(n).map(o=>encodeURIComponent(o)+"="+encodeURIComponent(n[o])).join("&")}function l(n){return{"X-Project-Id":`${n.id}`,Authorization:n==null?void 0:n.bearerToken,"X-Client-Version":n==null?void 0:n.clientVersion}}var c="https://app.apifox.com",S=async(n,o)=>{let{projectConfig:e}=n,{data:i}=await o.fetchJSON(`${c}/api/v1/project-members`,{headers:l(e)}),p=await o.fetchJSON(`${c}/api/v1/api-tree-list`,{headers:l(e)}),d=[],A=[],u=s=>{var t;let f=((t=e.requestMap)==null?void 0:t[s.path])||s.path,r=(i||[]).find(a=>a.user.id===s.responsibleId);return{id:s.id,name:s.name,method:s.method.toUpperCase(),path:s.path,realPath:f,creator:`${(r==null?void 0:r.nickname)||"-"}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${s.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${s==null?void 0:s.id}`}},m=(s,f="")=>{if(s.type!=="apiDetailFolder"||!s.children||s.children.length===0)return;let[r,t]=h(s.children||[],a=>a.type==="apiDetail");if(r.length>0){let a=r.map(x=>u(x.api));A.push(...a),d.push({id:s.key,name:f?`${f}__${s.name}`:s.name,apis:a})}t.forEach(a=>{m(a,s.name)})};return p.data.forEach(s=>{m(s)}),{groups:[{id:"all",name:"\u5168\u90E8\u63A5\u53E3",apis:A},...d]}},y=async(n,o)=>{var s,f,r;let{projectConfig:e,overviewApiResponse:i}=n,p=await o.fetchJSON(`${c}/api/v1/api-details/${i.id}`,{headers:l(e)}),A=(await o.fetchJSON(`${c}/api/v1/api-mocks`,{headers:l(e)})).data.filter(t=>t.apiDetailId===i.id).map((t,a)=>({id:a===0?"default":t.id,name:t.name,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,mockData:JSON.parse(t.response.bodyData),realSceneId:t.id})),u=((s=e.requestMap)==null?void 0:s[i.path])||i.path;return{id:i.id,name:i.name,method:i.method,path:i.path,realPath:u,desc:(f=p==null?void 0:p.data)==null?void 0:f.description,creator:`${i.creator}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${i==null?void 0:i.id}`,mockData:((r=A[0])==null?void 0:r.mockData)||{},scenes:A}},O=(n,o)=>{let{projectConfig:e,apiResponse:i,addScenePayload:p}=n,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(p.mockData)},name:p.name,apiDetailId:i.id,conditions:[],ipCondition:{}};return o.fetchJSON(`${c}/api/v1/api-mocks`,{method:"POST",body:R(d),headers:{...l(e),"Content-Type":"application/x-www-form-urlencoded"}}).then(A=>({id:A.data.id}))},P=(n,o)=>{let{projectConfig:e,apiResponse:i,sceneResponse:p}=n,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(p.mockData)},name:p.name,apiDetailId:i.id,id:p.id,conditions:[],ipCondition:{}};return o.fetchJSON(`${c}/api/v1/api-mocks/${p.realSceneId}`,{method:"PUT",body:R(d),headers:{...l(e),"Content-Type":"application/x-www-form-urlencoded"}})},g=(n,o)=>{let{projectConfig:e,sceneResponse:i}=n;return o.fetchJSON(`${c}/api/v1/api-mocks/${i.realSceneId}`,{method:"DELETE",headers:l(e)})};export{O as addApiScene,g as deleteApiScene,y as getApi,S as getProject,P as updateApiScene};
