function h(i,o){if(!Array.isArray(i)||typeof o!="function")throw new Error("Invalid arguments. Expected an array and a function.");let e=[],n=[];for(let t of i)o(t)?e.push(t):n.push(t);return[e,n]}function R(i){return Object.keys(i).map(o=>typeof i[o]=="object"&&i[o]!==null?encodeURIComponent(o)+"="+encodeURIComponent(JSON.stringify(i[o])):encodeURIComponent(o)+"="+encodeURIComponent(i[o])).join("&")}function l(i){return{"X-Project-Id":`${i.id}`,Authorization:i==null?void 0:i.bearerToken,"X-Client-Version":i==null?void 0:i.clientVersion}}var c="https://app.apifox.com",S=async(i,o)=>{let{projectConfig:e}=i,{data:n}=await o.fetchJSON(`${c}/api/v1/project-members`,{headers:l(e)}),t=await o.fetchJSON(`${c}/api/v1/api-tree-list`,{headers:l(e)}),d=[],A=[],u=s=>{var p;let f=((p=e.requestMap)==null?void 0:p[s.path])||s.path,r=(n||[]).find(a=>a.user.id===s.responsibleId);return{id:s.id,name:s.name,method:s.method.toUpperCase(),path:s.path,realPath:f,creator:`${(r==null?void 0:r.nickname)||"-"}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${s.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${s==null?void 0:s.id}`}},m=(s,f="")=>{if(s.type!=="apiDetailFolder"||!s.children||s.children.length===0)return;let[r,p]=h(s.children||[],a=>a.type==="apiDetail");if(r.length>0){let a=r.map(x=>u(x.api));A.push(...a),d.push({id:s.key,name:f?`${f}__${s.name}`:s.name,apis:a})}p.forEach(a=>{m(a,s.name)})};return t.data.forEach(s=>{m(s)}),{groups:[{id:"all",name:"\u5168\u90E8\u63A5\u53E3",apis:A},...d]}},y=async(i,o)=>{var s,f,r;let{projectConfig:e,overviewApiResponse:n}=i,t=await o.fetchJSON(`${c}/api/v1/api-details/${n.id}`,{headers:l(e)}),A=(await o.fetchJSON(`${c}/api/v1/api-mocks`,{headers:l(e)})).data.filter(p=>p.apiDetailId===n.id).map((p,a)=>({id:a===0?"default":p.id,name:p.name,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${n.path}`,mockData:JSON.parse(p.response.bodyData),realSceneId:p.id})),u=((s=e.requestMap)==null?void 0:s[n.path])||n.path;return{id:n.id,name:n.name,method:n.method,path:n.path,realPath:u,desc:(f=t==null?void 0:t.data)==null?void 0:f.description,creator:`${n.creator}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${n.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${n==null?void 0:n.id}`,mockData:((r=A[0])==null?void 0:r.mockData)||{},scenes:A}},P=(i,o)=>{let{projectConfig:e,apiResponse:n,addScenePayload:t}=i,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(t.mockData)},name:t.name,apiDetailId:n.id,conditions:[],ipCondition:{}};return o.fetchJSON(`${c}/api/v1/api-mocks`,{method:"POST",body:R(d),headers:{...l(e),"Content-Type":"application/x-www-form-urlencoded"}}).then(A=>({id:A.data.id}))},O=(i,o)=>{let{projectConfig:e,apiResponse:n,sceneResponse:t}=i,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(t.mockData)},name:t.name,apiDetailId:n.id,id:t.id,conditions:[],ipCondition:{}};return o.fetchJSON(`${c}/api/v1/api-mocks/${t.realSceneId}`,{method:"PUT",body:R(d),headers:{...l(e),"Content-Type":"application/x-www-form-urlencoded"}})},g=(i,o)=>{let{projectConfig:e,sceneResponse:n}=i;return o.fetchJSON(`${c}/api/v1/api-mocks/${n.realSceneId}`,{method:"DELETE",headers:l(e)})};export{P as addApiScene,g as deleteApiScene,y as getApi,S as getProject,O as updateApiScene};
