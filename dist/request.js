var p="https://app.apifox.com",l=(n,a)=>{let{projectConfig:r}=n;return a.fetchJSON(`${p}/api/v1/api-tree-list?locale=zh-CN`,{headers:{"X-Project-Id":`${r.id}`}}).then(s=>{let c=[],o=e=>{var t;let i=((t=r.requestMap)==null?void 0:t[e.path])||e.path;return{id:e.id,name:e.name,method:e.method.toUpperCase(),path:e.path,realPath:i,creator:`${e.responsibleId}`,mockUrl:`${r==null?void 0:r.mockPrefixUrl}/${e.path}`,sourceUrl:`${p}/project/${r==null?void 0:r.id}/apis/api-${e==null?void 0:e.id}`,creatorId:e.responsibleId}},A=e=>{var i;return((i=e.children)==null?void 0:i.length)>0&&e.children[0].type==="apiDetail"},d=(e,i="")=>{e.type!=="apiDetailFolder"||!e.children||e.children.length===0||(A(e)?c.push({id:e.key,name:`${i}__${e.name}`,apis:e.children.map(t=>o(t.api))}):e.children.forEach(t=>{d(t,e.name)}))};return s.data.forEach(e=>{d(e)}),{groups:c}})},u=async(n,a)=>{var e,i;let{projectConfig:r,overviewApiResponse:s}=n,o=(await a.fetchJSON(`${p}/api/v1/api-mocks?locale=zh-CN`)).data.filter(t=>t.apiDetailId===s.id).map(t=>({id:t.id,name:t.name,mockUrl:`${r==null?void 0:r.mockPrefixUrl}/${s.path}`,mockData:JSON.parse(t.response.bodyData)})),A=((e=r.requestMap)==null?void 0:e[s.url])||s.url;return{id:s.id,name:s.name,method:s.method,path:s.url,realPath:A,creator:`${s.creatorId}`,mockUrl:`${r==null?void 0:r.mockPrefixUrl}/${s.path}`,sourceUrl:`${p}/project/${r==null?void 0:r.id}/apis/api-${s==null?void 0:s.id}`,mockData:((i=o[0])==null?void 0:i.mockData)||{},scenes:o,creatorId:s.creatorId}};export{u as getApi,l as getProject};
