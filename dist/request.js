function h(s,o){if(!Array.isArray(s)||typeof o!="function")throw new Error("Invalid arguments. Expected an array and a function.");let e=[],i=[];for(let t of s)o(t)?e.push(t):i.push(t);return[e,i]}function R(s,o=""){return Object.entries(s).map(([e,i])=>typeof i=="object"&&i!==null?R(i,`${o}${encodeURIComponent(e)}_`):`${o}${encodeURIComponent(e)}=${encodeURIComponent(i)}`).join("&")}function l(s){return{"X-Project-Id":`${s.id}`,Authorization:s==null?void 0:s.bearerToken,"X-Client-Version":s==null?void 0:s.clientVersion}}var c="https://app.apifox.com",S=async(s,o)=>{let{projectConfig:e}=s,{data:i}=await o.fetchJSON(`${c}/api/v1/project-members`,{headers:l(e)}),t=await o.fetchJSON(`${c}/api/v1/api-tree-list`,{headers:l(e)}),d=[],A=[],u=n=>{var p;let f=((p=e.requestMap)==null?void 0:p[n.path])||n.path,r=(i||[]).find(a=>a.user.id===n.responsibleId);return{id:n.id,name:n.name,method:n.method.toUpperCase(),path:n.path,realPath:f,creator:`${(r==null?void 0:r.nickname)||"-"}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${n.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${n==null?void 0:n.id}`}},m=(n,f="")=>{if(n.type!=="apiDetailFolder"||!n.children||n.children.length===0)return;let[r,p]=h(n.children||[],a=>a.type==="apiDetail");if(r.length>0){let a=r.map(x=>u(x.api));A.push(...a),d.push({id:n.key,name:f?`${f}__${n.name}`:n.name,apis:a})}p.forEach(a=>{m(a,n.name)})};return t.data.forEach(n=>{m(n)}),{groups:[{id:"all",name:"\u5168\u90E8\u63A5\u53E3",apis:A},...d]}},y=async(s,o)=>{var n,f,r;let{projectConfig:e,overviewApiResponse:i}=s,t=await o.fetchJSON(`${c}/api/v1/api-details/${i.id}`,{headers:l(e)}),A=(await o.fetchJSON(`${c}/api/v1/api-mocks`,{headers:l(e)})).data.filter(p=>p.apiDetailId===i.id).map((p,a)=>({id:a===0?"default":p.id,name:p.name,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,mockData:JSON.parse(p.response.bodyData),realSceneId:p.id})),u=((n=e.requestMap)==null?void 0:n[i.path])||i.path;return{id:i.id,name:i.name,method:i.method,path:i.path,realPath:u,desc:(f=t==null?void 0:t.data)==null?void 0:f.description,creator:`${i.creator}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${i==null?void 0:i.id}`,mockData:((r=A[0])==null?void 0:r.mockData)||{},scenes:A}},O=(s,o)=>{let{projectConfig:e,apiResponse:i,addScenePayload:t}=s,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(t.mockData)},name:t.name,apiDetailId:i.id,conditions:[],ipCondition:{}};return o.fetchJSON(`${c}/api/v1/api-mocks`,{method:"POST",body:R(d),headers:{...l(e),"Content-Type":"application/x-www-form-urlencoded"}}).then(A=>({id:A.data.id}))},P=(s,o)=>{let{projectConfig:e,apiResponse:i,sceneResponse:t}=s,d={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(t.mockData)},name:t.name,apiDetailId:i.id,id:t.id,conditions:[],ipCondition:{}};return o.fetchJSON(`${c}/api/v1/api-mocks/${t.realSceneId}`,{method:"PUT",body:R(d),headers:{...l(e),"Content-Type":"application/x-www-form-urlencoded"}})},g=(s,o)=>{let{projectConfig:e,sceneResponse:i}=s;return o.fetchJSON(`${c}/api/v1/api-mocks/${i.realSceneId}`,{method:"DELETE",headers:l(e)})};export{O as addApiScene,g as deleteApiScene,y as getApi,S as getProject,P as updateApiScene};
