function R(n,t){if(!Array.isArray(n)||typeof t!="function")throw new Error("Invalid arguments. Expected an array and a function.");let e=[],i=[];for(let o of n)t(o)?e.push(o):i.push(o);return[e,i]}function l(n){return{"X-Project-Id":`${n.id}`,Authorization:n==null?void 0:n.bearerToken,"X-Client-Version":n==null?void 0:n.clientVersion}}var c="https://app.apifox.com",h=(n,t)=>{let{projectConfig:e}=n;return t.fetchJSON(`${c}/api/v1/api-tree-list?locale=zh-CN`,{headers:l(e)}).then(i=>{let o=[],p=[],A=s=>{var a;let r=((a=e.requestMap)==null?void 0:a[s.path])||s.path;return{id:s.id,name:s.name,method:s.method.toUpperCase(),path:s.path,realPath:r,creator:`${s.responsibleId}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${s.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${s==null?void 0:s.id}`,creatorId:s.responsibleId}},f=(s,r="")=>{if(s.type!=="apiDetailFolder"||!s.children||s.children.length===0)return;let[a,u]=R(s.children||[],d=>d.type==="apiDetail");if(a.length>0){let d=a.map(m=>A(m.api));p.push(...d),o.push({id:s.key,name:r?`${r}__${s.name}`:s.name,apis:d})}u.forEach(d=>{f(d,s.name)})};return i.data.forEach(s=>{f(s)}),{groups:[{id:"all",name:"\u5168\u90E8\u63A5\u53E3",apis:p},...o]}})},x=async(n,t)=>{var s,r;let{projectConfig:e,overviewApiResponse:i}=n,p=(await t.fetchJSON(`${c}/api/v1/api-mocks?locale=zh-CN`,{headers:l(e)})).data.filter(a=>a.apiDetailId===i.id).map((a,u)=>({id:u===0?"default":a.id,name:a.name,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,mockData:JSON.parse(a.response.bodyData),realSceneId:a.id})),A=((s=e.requestMap)==null?void 0:s[i.path])||i.path;return{id:i.id,name:i.name,method:i.method,path:i.path,realPath:A,creator:`${i.creatorId}`,mockUrl:`${e==null?void 0:e.mockPrefixUrl}${i.path}`,sourceUrl:`${c}/project/${e==null?void 0:e.id}/apis/api-${i==null?void 0:i.id}`,mockData:((r=p[0])==null?void 0:r.mockData)||{},scenes:p,creatorId:i.creatorId}},S=(n,t)=>{let{projectConfig:e,apiResponse:i,addScenePayload:o}=n,p={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(o.mockData)},name:o.name,apiDetailId:i.id};return t.fetchJSON(`${c}/api/v1/api-mocks?locale=zh-CN`,{method:"POST",body:JSON.stringify(p),headers:l(e)}).then(A=>({id:A.data.id}))},y=(n,t)=>{let{projectConfig:e,apiResponse:i,sceneResponse:o}=n,p={response:{code:200,delay:0,headers:[],bodyType:"json",bodyData:JSON.stringify(o.mockData)},name:o.name,apiDetailId:i.id,id:o.id};return t.fetchJSON(`${c}/api/v1/api-mocks/${o.realSceneId}?locale=zh-CN`,{method:"POST",body:JSON.stringify(p),headers:l(e)})},P=(n,t)=>{let{sceneResponse:e}=n;return t.fetchJSON(`${c}/api/v1/api-mocks/${e.realSceneId}?locale=zh-CN`,{method:"DELETE"})};export{S as addApiScene,P as deleteApiScene,x as getApi,h as getProject,y as updateApiScene};
