{
  "version": 3,
  "sources": ["../src/request.ts"],
  "sourcesContent": ["import {\n  ProjectConfig,\n  GroupResponse,\n  OverviewApiResponse,\n  ApiResponse,\n  SceneResponse,\n  userScript,\n  AddSceneResponse,\n  GetApiRequestParams,\n  MoveApiRequestParams,\n  AddApiSceneRequestParams,\n  UpdateApiSceneRequestParams,\n  ApiMethod,\n} from \"mock-proxy-kit\";\nimport {\n  ApifoxAddSceneOriginalPayload,\n  ApifoxAddSceneOriginalResponse,\n  ApifoxApiDetail,\n  ApifoxApiOverview,\n  ApifoxEditSceneOriginalPayload,\n  ApifoxEditSceneOriginalResponse,\n  ApifoxFolder,\n  ApifoxQueryApiDetailOriginalResponse,\n  ApifoxQueryApiScenesOriginalResponse,\n  ApifoxOriginalQueryProjectResponse,\n  ApifoxQueryMembersOriginalResponse,\n} from \"./types\";\n\nfunction partition<T>(array: T[], predicate: (item: T) => boolean): [T[], T[]] {\n  if (!Array.isArray(array) || typeof predicate !== \"function\") {\n    throw new Error(\"Invalid arguments. Expected an array and a function.\");\n  }\n\n  const satisfied: T[] = [];\n  const unsatisfied: T[] = [];\n\n  for (const item of array) {\n    if (predicate(item)) {\n      satisfied.push(item);\n    } else {\n      unsatisfied.push(item);\n    }\n  }\n\n  return [satisfied, unsatisfied];\n}\n\nfunction jsonToFormData(json: Record<string, any>) {\n  let formData = new FormData();\n\n  for (let key in json) {\n      if(json.hasOwnProperty(key)) {\n          formData.append(key, json[key]);\n      }\n  }\n\n  return formData;\n}\n\nfunction makeRequestHeaders(projectConfig: ApifoxProjectConfig) {\n  return {\n    \"X-Project-Id\": `${projectConfig.id}`,\n    Authorization: projectConfig?.bearerToken!,\n    \"X-Client-Version\": projectConfig?.clientVersion!,\n  };\n}\n\nfunction removePrefixSlash(str: string) {\n  return str.replace(/^\\/+/, \"\");\n}\n\ninterface RequestMap {\n  /**\n   * key\u4E3Aapi path\uFF1Bvalue\u4E3ArealPath\n   */\n  [path: string]: string;\n}\n\ninterface ApifoxProjectConfig extends ProjectConfig {\n  requestMap?: RequestMap;\n  mockPrefixUrl?: string;\n  bearerToken?: string;\n  clientVersion?: string;\n}\n\ninterface ApifoxOverviewApiResponse extends OverviewApiResponse {\n\n}\n\ninterface ApifoxApiResponse extends ApiResponse {\n\n}\n\ninterface ApifoxAddSceneResponse extends AddSceneResponse {}\n\ninterface ApifoxSceneResponse extends SceneResponse {}\n\nconst ApifoxBaseUrl = \"https://app.apifox.com\";\n\nexport const getProject: userScript.GetProjectRequest<{\n  projectConfig: ApifoxProjectConfig;\n}> = async (params, context) => {\n  const { projectConfig } = params;\n  const {\n    data: members,\n  } = await context.fetchJSON<ApifoxQueryMembersOriginalResponse>(\n    `${ApifoxBaseUrl}/api/v1/project-members`,\n    {\n      headers: makeRequestHeaders(projectConfig),\n    }\n  );\n\n  const res = await context.fetchJSON<ApifoxOriginalQueryProjectResponse>(\n    `${ApifoxBaseUrl}/api/v1/api-tree-list`,\n    {\n      headers: makeRequestHeaders(projectConfig),\n    }\n  );\n\n  const groups: GroupResponse[] = [];\n  const allApis: OverviewApiResponse[] = [];\n  const processApiData = (api: ApifoxApiDetail): OverviewApiResponse => {\n    const realPath = projectConfig.requestMap?.[api.path] || api.path;\n    const targetMember = (members || []).find(m => m.user.id === api.responsibleId);\n    return {\n      id: api.id,\n      name: api.name,\n      method: api.method.toUpperCase() as ApiMethod,\n      path: api.path,\n      realPath,\n      creator: `${targetMember?.nickname || '-'}`,\n      mockUrl: `${projectConfig?.mockPrefixUrl}${api.path}`,\n      sourceUrl: `${ApifoxBaseUrl}/project/${projectConfig?.id}/apis/api-${api?.id}`,\n    };\n  };\n\n  const processFolderData = (\n    folder: ApifoxFolder | ApifoxApiOverview,\n    prefix: string = \"\"\n  ) => {\n    if (\n      folder.type !== \"apiDetailFolder\" ||\n      !folder.children ||\n      folder.children.length === 0\n    )\n      return;\n\n    const [apis, folders] = partition(\n      folder.children || [],\n      (c) => c.type === \"apiDetail\"\n    );\n\n    if (apis.length > 0) {\n      const processedApis = apis.map((c) =>\n        processApiData((c as ApifoxApiOverview).api)\n      );\n      allApis.push(...processedApis);\n      groups.push({\n        id: folder.key,\n        name: prefix ? `${prefix}__${folder.name}` : folder.name,\n        apis: processedApis,\n      });\n    }\n\n    folders.forEach((childFolder) => {\n      processFolderData(childFolder, folder.name);\n    });\n  };\n\n  res.data.forEach((folder) => {\n    processFolderData(folder);\n  });\n\n  return {\n    groups: [\n      {\n        id: \"all\",\n        name: \"\u5168\u90E8\u63A5\u53E3\",\n        apis: allApis,\n      },\n      ...groups,\n    ],\n  };\n};\n\nexport const getApi: userScript.GetApiRequest<\n  GetApiRequestParams & {\n    projectConfig: ApifoxProjectConfig;\n    overviewApiResponse: ApifoxOverviewApiResponse;\n  },\n  ApifoxApiResponse\n> = async (params, context) => {\n  const { projectConfig, overviewApiResponse } = params;\n\n  const apiDetail =\n    await context.fetchJSON<ApifoxQueryApiDetailOriginalResponse>(\n      `${ApifoxBaseUrl}/api/v1/api-details/${overviewApiResponse.id}`,\n      {\n        headers: makeRequestHeaders(projectConfig),\n      }\n    );\n\n  const mocks = await context.fetchJSON<ApifoxQueryApiScenesOriginalResponse>(\n    `${ApifoxBaseUrl}/api/v1/api-mocks`,\n    {\n      headers: makeRequestHeaders(projectConfig),\n    }\n  );\n\n  const scenes: SceneResponse[] = mocks.data\n    .filter((mock) => {\n      return mock.apiDetailId === overviewApiResponse.id;\n    })\n    .map((mock, index) => {\n      return {\n        id: index === 0 ? \"default\" : mock.id,\n        name: mock.name,\n        mockUrl: `${projectConfig?.mockPrefixUrl}${overviewApiResponse.path}`,\n        mockData: JSON.parse(mock.response.bodyData),\n        realSceneId: mock.id,\n      };\n    });\n\n  const realPath =\n    projectConfig.requestMap?.[overviewApiResponse.path] ||\n    overviewApiResponse.path;\n\n  const ret: ApifoxApiResponse = {\n    id: overviewApiResponse.id,\n    name: overviewApiResponse.name,\n    method: overviewApiResponse.method,\n    path: overviewApiResponse.path,\n    realPath,\n    desc: apiDetail?.data?.description,\n    creator: `${overviewApiResponse.creator}`,\n    mockUrl: `${projectConfig?.mockPrefixUrl}${overviewApiResponse.path}`,\n    sourceUrl: `${ApifoxBaseUrl}/project/${projectConfig?.id}/apis/api-${overviewApiResponse?.id}`,\n    mockData: scenes[0]?.mockData || {},\n    scenes,\n  };\n  return ret;\n};\n\n// export const moveApi: userScript.MoveApiRequest<\n//   MoveApiRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     overviewApiResponse: ApifoxOverviewApiResponse;\n//   },\n//   any\n// > = (params, context) => {\n//   const { projectConfig, overviewApiResponse, groupPayload } = params;\n\n//   const payload: any = {\n//     itfId: overviewApiResponse.id,\n//     modId: groupPayload.id,\n//     repositoryId: projectConfig.id,\n//     op: 1,\n//   };\n\n//   return context.fetchJSON<any>(`${ApifoxApiBaseUrl}/interface/move`, {\n//     method: \"POST\",\n//     body: JSON.stringify(payload),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n// };\n\nexport const addApiScene: userScript.AddApiSceneRequest<\n  AddApiSceneRequestParams & {\n    projectConfig: ApifoxProjectConfig;\n    apiResponse: ApifoxApiResponse;\n  },\n  ApifoxAddSceneResponse\n> = (params, context) => {\n  const { projectConfig, apiResponse, addScenePayload } = params;\n\n  const payload: ApifoxAddSceneOriginalPayload = {\n    response: {\n      code: 200,\n      delay: 0,\n      headers: [],\n      bodyType: \"json\",\n      bodyData: JSON.stringify(addScenePayload.mockData),\n    },\n    name: addScenePayload.name,\n    apiDetailId: apiResponse.id as number,\n    conditions: [],\n    ipCondition: {},\n  };\n\n  return context\n    .fetchJSON<ApifoxAddSceneOriginalResponse>(\n      `${ApifoxBaseUrl}/api/v1/api-mocks`,\n      {\n        method: \"POST\",\n        body: jsonToFormData(payload),\n        headers: makeRequestHeaders(projectConfig),\n      }\n    )\n    .then((res) => {\n      return {\n        id: res.data.id,\n      };\n    });\n};\n\nexport const updateApiScene: userScript.UpdateApiSceneRequest<\n  UpdateApiSceneRequestParams & {\n    projectConfig: ApifoxProjectConfig;\n    apiResponse: ApifoxApiResponse;\n    sceneResponse: ApifoxSceneResponse;\n  },\n  any\n> = (params, context) => {\n  const { projectConfig, apiResponse, sceneResponse } = params;\n\n  const payload: ApifoxEditSceneOriginalPayload = {\n    response: {\n      code: 200,\n      delay: 0,\n      headers: [],\n      bodyType: \"json\",\n      bodyData: JSON.stringify(sceneResponse.mockData),\n    },\n    name: sceneResponse.name,\n    apiDetailId: apiResponse.id as number,\n    id: sceneResponse.id as number,\n    conditions: [],\n    ipCondition: {},\n  };\n\n  return context.fetchJSON<ApifoxEditSceneOriginalResponse>(\n    `${ApifoxBaseUrl}/api/v1/api-mocks/${sceneResponse.realSceneId}`,\n    {\n      method: \"PUT\",\n      body: jsonToFormData(payload),\n      headers: makeRequestHeaders(projectConfig),\n    }\n  );\n};\n\nexport const deleteApiScene: userScript.DeleteApiSceneRequest<\n  UpdateApiSceneRequestParams & {\n    projectConfig: ApifoxProjectConfig;\n    apiResponse: ApifoxApiResponse;\n    sceneResponse: ApifoxSceneResponse;\n  },\n  any\n> = (params, context) => {\n  const { projectConfig, sceneResponse } = params;\n\n  return context.fetchJSON<any>(\n    `${ApifoxBaseUrl}/api/v1/api-mocks/${sceneResponse.realSceneId}`,\n    {\n      method: \"DELETE\",\n      headers: makeRequestHeaders(projectConfig),\n    }\n  );\n};\n"],
  "mappings": "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",
  "names": ["partition", "array", "predicate", "satisfied", "unsatisfied", "item", "jsonToFormData", "json", "formData", "key", "makeRequestHeaders", "projectConfig", "ApifoxBaseUrl", "getProject", "params", "context", "projectConfig", "members", "makeRequestHeaders", "res", "groups", "allApis", "processApiData", "api", "_a", "realPath", "targetMember", "m", "processFolderData", "folder", "prefix", "apis", "folders", "partition", "c", "processedApis", "childFolder", "getApi", "_b", "_c", "overviewApiResponse", "apiDetail", "scenes", "mock", "index", "addApiScene", "apiResponse", "addScenePayload", "payload", "jsonToFormData", "updateApiScene", "sceneResponse", "deleteApiScene"]
}
