{
  "version": 3,
  "sources": ["../src/request.ts"],
  "sourcesContent": ["import {\n  ProjectConfig,\n  GroupResponse,\n  OverviewApiResponse,\n  ApiResponse,\n  SceneResponse,\n  userScript,\n  AddSceneResponse,\n  GetApiRequestParams,\n  MoveApiRequestParams,\n  AddApiSceneRequestParams,\n  UpdateApiSceneRequestParams,\n  ApiMethod,\n} from \"mock-proxy-kit\";\nimport {\n  ApifoxApiDetail,\n  ApifoxApiOverview,\n  ApifoxFolder,\n  ApifoxOriginalQueryApiScenesResponse,\n  ApifoxOriginalQueryProjectResponse,\n} from \"./types\";\n\nfunction partition<T>(array: T[], predicate: (item: T) => boolean): [T[], T[]] {\n  if (!Array.isArray(array) || typeof predicate !== 'function') {\n    throw new Error('Invalid arguments. Expected an array and a function.');\n  }\n\n  const satisfied: T[] = [];\n  const unsatisfied: T[] = [];\n\n  for (const item of array) {\n    if (predicate(item)) {\n      satisfied.push(item);\n    } else {\n      unsatisfied.push(item);\n    }\n  }\n\n  return [satisfied, unsatisfied];\n}\n\nfunction removePrefixSlash(str: string) {\n  return str.replace(/^\\/+/, \"\");\n}\n\ninterface RequestMap {\n  /**\n   * key\u4E3Aapi path\uFF1Bvalue\u4E3ArealPath\n   */\n  [path: string]: string;\n}\n\ninterface ApifoxProjectConfig extends ProjectConfig {\n  requestMap?: RequestMap;\n  mockPrefixUrl?: string;\n  bearerToken?: string;\n  clientVersion?: string;\n}\n\ninterface ApifoxOverviewApiResponse extends OverviewApiResponse {\n  creatorId: number;\n}\n\ninterface ApifoxApiResponse extends ApiResponse {\n  creatorId: number;\n}\n\ninterface ApifoxAddSceneResponse extends AddSceneResponse {}\n\ninterface ApifoxSceneResponse extends SceneResponse {}\n\nconst ApifoxBaseUrl = \"https://app.apifox.com\";\n\nexport const getProject: userScript.GetProjectRequest<{\n  projectConfig: ApifoxProjectConfig;\n}> = (params, context) => {\n  const { projectConfig } = params;\n\n  return context\n    .fetchJSON<ApifoxOriginalQueryProjectResponse>(\n      `${ApifoxBaseUrl}/api/v1/api-tree-list?locale=zh-CN`,\n      {\n        headers: {\n          \"X-Project-Id\": `${projectConfig.id}`,\n          Authorization: projectConfig?.bearerToken!,\n          \"X-Client-Version\": projectConfig?.clientVersion!,\n        },\n      }\n    )\n    .then((res) => {\n      const groups: GroupResponse[] = [];\n      const allApis: OverviewApiResponse[] = [];\n      const processApiData = (api: ApifoxApiDetail): OverviewApiResponse => {\n        const realPath = projectConfig.requestMap?.[api.path] || api.path;\n        return {\n          id: api.id,\n          name: api.name,\n          method: api.method.toUpperCase() as ApiMethod,\n          path: api.path,\n          realPath,\n          creator: `${api.responsibleId}`,\n          mockUrl: `${projectConfig?.mockPrefixUrl}${api.path}`,\n          sourceUrl: `${ApifoxBaseUrl}/project/${projectConfig?.id}/apis/api-${api?.id}`,\n          creatorId: api.responsibleId,\n        };\n      };\n\n      const processFolderData = (\n        folder: ApifoxFolder | ApifoxApiOverview,\n        prefix: string = \"\"\n      ) => {\n        if (\n          folder.type !== \"apiDetailFolder\" ||\n          !folder.children ||\n          folder.children.length === 0\n        )\n          return;\n\n        const [apis, folders] = partition(\n          folder.children || [],\n          (c) => c.type === \"apiDetail\"\n        );\n\n        if (apis.length > 0) {\n          const processedApis = apis.map((c) =>\n            processApiData((c as ApifoxApiOverview).api)\n          );\n          allApis.push(...processedApis);\n          groups.push({\n            id: folder.key,\n            name: prefix ? `${prefix}__${folder.name}` : folder.name,\n            apis: processedApis,\n          });\n        }\n\n        folders.forEach((childFolder) => {\n          processFolderData(childFolder, folder.name);\n        });\n      };\n\n      res.data.forEach((folder) => {\n        processFolderData(folder);\n      });\n\n      return {\n        groups: [\n          {\n            id: \"all\",\n            name: \"\u5168\u90E8\u63A5\u53E3\",\n            apis: allApis,\n          },\n          ...groups,\n        ],\n      };\n    });\n};\n\nexport const getApi: userScript.GetApiRequest<\n  GetApiRequestParams & {\n    projectConfig: ApifoxProjectConfig;\n    overviewApiResponse: ApifoxOverviewApiResponse;\n  },\n  ApifoxApiResponse\n> = async (params, context) => {\n  const { projectConfig, overviewApiResponse } = params;\n\n  const mocks = await context.fetchJSON<ApifoxOriginalQueryApiScenesResponse>(\n    `${ApifoxBaseUrl}/api/v1/api-mocks?locale=zh-CN`,\n    {\n      headers: {\n        \"X-Project-Id\": `${projectConfig.id}`,\n        Authorization: projectConfig?.bearerToken!,\n        \"X-Client-Version\": projectConfig?.clientVersion!,\n      },\n    }\n  );\n\n  const scenes: SceneResponse[] = mocks.data\n    .filter((mock) => {\n      return mock.apiDetailId === overviewApiResponse.id;\n    })\n    .map((mock) => {\n      return {\n        id: mock.id,\n        name: mock.name,\n        mockUrl: `${projectConfig?.mockPrefixUrl}${overviewApiResponse.path}`,\n        mockData: JSON.parse(mock.response.bodyData),\n      };\n    });\n\n  const realPath =\n    projectConfig.requestMap?.[overviewApiResponse.url] ||\n    overviewApiResponse.url;\n\n  const ret: ApifoxApiResponse = {\n    id: overviewApiResponse.id,\n    name: overviewApiResponse.name,\n    method: overviewApiResponse.method,\n    path: overviewApiResponse.path,\n    realPath,\n    // TODO: \u5F85\u8865\u5145\n    creator: `${overviewApiResponse.creatorId}`,\n    mockUrl: `${projectConfig?.mockPrefixUrl}${overviewApiResponse.path}`,\n    sourceUrl: `${ApifoxBaseUrl}/project/${projectConfig?.id}/apis/api-${overviewApiResponse?.id}`,\n    mockData: scenes[0]?.mockData || {},\n    scenes,\n    creatorId: overviewApiResponse.creatorId,\n  };\n  return ret;\n};\n\n// export const moveApi: userScript.MoveApiRequest<\n//   MoveApiRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     overviewApiResponse: ApifoxOverviewApiResponse;\n//   },\n//   any\n// > = (params, context) => {\n//   const { projectConfig, overviewApiResponse, groupPayload } = params;\n\n//   const payload: any = {\n//     itfId: overviewApiResponse.id,\n//     modId: groupPayload.id,\n//     repositoryId: projectConfig.id,\n//     op: 1,\n//   };\n\n//   return context.fetchJSON<any>(`${ApifoxApiBaseUrl}/interface/move`, {\n//     method: \"POST\",\n//     body: JSON.stringify(payload),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n// };\n\n// export const addApiScene: userScript.AddApiSceneRequest<\n//   AddApiSceneRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     apiResponse: ApifoxApiResponse;\n//   },\n//   ApifoxAddSceneResponse\n// > = (params, context) => {\n//   const { projectConfig, apiResponse, addScenePayload } = params;\n\n//   const payload = {\n//     body: JSON.stringify(addScenePayload.mockData),\n//     creatorId: apiResponse.creatorId,\n//     interfaceId: apiResponse.id,\n//     moduleId: apiResponse.moduleId,\n//     name: addScenePayload.name,\n//     repositoryId: projectConfig.id,\n//     scope: \"response\",\n//   };\n\n//   return context\n//     .fetchJSON<ApifoxOriginalEditSceneResponse>(\n//       `${ApifoxApiBaseUrl}/scene/create`,\n//       {\n//         method: \"POST\",\n//         body: JSON.stringify(payload),\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     )\n//     .then((res) => {\n//       return {\n//         id: res.data.id,\n//       };\n//     });\n// };\n\n// export const updateApiScene: userScript.UpdateApiSceneRequest<\n//   UpdateApiSceneRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     apiResponse: ApifoxApiResponse;\n//     sceneResponse: ApifoxSceneResponse;\n//   },\n//   ApifoxOriginalEditSceneResponse\n// > = (params, context) => {\n//   const { projectConfig, apiResponse, sceneResponse } = params;\n\n//   const payload = {\n//     id: sceneResponse.id,\n//     body: JSON.stringify(sceneResponse.mockData),\n//     creatorId: apiResponse.creatorId,\n//     interfaceId: apiResponse.id,\n//     moduleId: apiResponse.moduleId,\n//     name: sceneResponse.name,\n//     repositoryId: projectConfig.id,\n//     scope: \"response\",\n//   };\n\n//   return context.fetchJSON<ApifoxOriginalEditSceneResponse>(\n//     `${ApifoxApiBaseUrl}/scene/update`,\n//     {\n//       method: \"POST\",\n//       body: JSON.stringify(payload),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     }\n//   );\n// };\n\n// export const deleteApiScene: userScript.DeleteApiSceneRequest<\n//   UpdateApiSceneRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     apiResponse: ApifoxApiResponse;\n//     sceneResponse: ApifoxSceneResponse;\n//   },\n//   any\n// > = (params, context) => {\n//   const { sceneResponse } = params;\n\n//   return context.fetchJSON<any>(\n//     `${ApifoxApiBaseUrl}/scene/remove?id=${sceneResponse.id}`,\n//     {\n//       method: \"GET\",\n//     }\n//   );\n// };\n"],
  "mappings": "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",
  "names": ["partition", "array", "predicate", "satisfied", "unsatisfied", "item", "ApifoxBaseUrl", "getProject", "params", "context", "projectConfig", "res", "groups", "allApis", "processApiData", "api", "_a", "realPath", "processFolderData", "folder", "prefix", "apis", "folders", "partition", "c", "processedApis", "childFolder", "getApi", "_b", "overviewApiResponse", "scenes", "mock"]
}
