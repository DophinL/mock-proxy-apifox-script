{
  "version": 3,
  "sources": ["../src/request.ts"],
  "sourcesContent": ["import {\n  ProjectConfig,\n  GroupResponse,\n  OverviewApiResponse,\n  ApiResponse,\n  SceneResponse,\n  userScript,\n  AddSceneResponse,\n  GetApiRequestParams,\n  MoveApiRequestParams,\n  AddApiSceneRequestParams,\n  UpdateApiSceneRequestParams,\n  ApiMethod,\n} from \"mock-proxy-kit\";\nimport {\n  ApifoxApiDetail,\n  ApifoxApiOverview,\n  ApifoxFolder,\n  ApifoxOriginalQueryApiScenesResponse,\n  ApifoxOriginalQueryProjectResponse,\n} from \"./types\";\n\nfunction removePrefixSlash(str: string) {\n  return str.replace(/^\\/+/, \"\");\n}\n\ninterface RequestMap {\n  /**\n   * key\u4E3Aapi path\uFF1Bvalue\u4E3ArealPath\n   */\n  [path: string]: string;\n}\n\ninterface ApifoxProjectConfig extends ProjectConfig {\n  requestMap?: RequestMap;\n  mockPrefixUrl?: string;\n}\n\ninterface ApifoxOverviewApiResponse extends OverviewApiResponse {\n  creatorId: number;\n}\n\ninterface ApifoxApiResponse extends ApiResponse {\n  creatorId: number;\n}\n\ninterface ApifoxAddSceneResponse extends AddSceneResponse {}\n\ninterface ApifoxSceneResponse extends SceneResponse {}\n\nconst ApifoxBaseUrl = \"https://app.apifox.com\";\nconst ApifoxApiBaseUrl = \"https://Apifoxapi.alibaba-inc.com\";\n\nconst DEFAULT_SCENE_ID = \"default\";\nconst DEFAULT_SCENE_NAME = \"default\";\n\nexport const getProject: userScript.GetProjectRequest<{\n  projectConfig: ApifoxProjectConfig;\n}> = (params, context) => {\n  const { projectConfig } = params;\n\n  return context\n    .fetchJSON<ApifoxOriginalQueryProjectResponse>(\n      `api/v1/api-tree-list?locale=zh-CN`,\n      {\n        headers: {\n          \"X-Project-Id\": `${projectConfig.id}`,\n        },\n      }\n    )\n    .then((res) => {\n      const groups: GroupResponse[] = [];\n      const processApiData = (api: ApifoxApiDetail): OverviewApiResponse => {\n        const realPath = projectConfig.requestMap?.[api.path] || api.path;\n        return {\n          id: api.id,\n          name: api.name,\n          method: api.method.toUpperCase() as ApiMethod,\n          path: api.path,\n          realPath,\n          creator: `${api.responsibleId}`,\n          mockUrl: `${projectConfig?.mockPrefixUrl}/${api.path}`,\n          sourceUrl: `${ApifoxBaseUrl}/project/${projectConfig?.id}/apis/api-${api?.id}`,\n          creatorId: api.responsibleId,\n        };\n      };\n\n      const isChildrenApis = (folder: ApifoxFolder) => {\n        if (\n          folder.children?.length > 0 &&\n          folder.children[0].type === \"apiDetail\"\n        ) {\n          return true;\n        }\n\n        return false;\n      };\n\n      const processFolderData = (\n        folder: ApifoxFolder | ApifoxApiOverview,\n        prefix: string = \"\"\n      ) => {\n        if (\n          folder.type !== \"apiDetailFolder\" ||\n          !folder.children ||\n          folder.children.length === 0\n        )\n          return;\n\n        if (isChildrenApis(folder as ApifoxFolder)) {\n          groups.push({\n            id: (folder as ApifoxFolder).key,\n            name: `${prefix}__${folder.name}`,\n            apis: folder.children.map((c) =>\n              processApiData((c as ApifoxApiOverview).api)\n            ),\n          });\n        } else {\n          folder.children.forEach((childFolder) => {\n            processFolderData(childFolder, folder.name);\n          });\n        }\n      };\n\n      res.data.forEach((folder) => {\n        processFolderData(folder);\n      });\n\n      return {\n        groups,\n      };\n    });\n};\n\nexport const getApi: userScript.GetApiRequest<\n  GetApiRequestParams & {\n    projectConfig: ApifoxProjectConfig;\n    overviewApiResponse: ApifoxOverviewApiResponse;\n  },\n  ApifoxApiResponse\n> = async (params, context) => {\n  const { projectConfig, overviewApiResponse } = params;\n\n  const mocks = await context\n  .fetchJSON<ApifoxOriginalQueryApiScenesResponse>(\n    `${ApifoxApiBaseUrl}/api/v1/api-mocks?locale=zh-CN`\n  );\n\n  const scenes: SceneResponse[] = mocks.data.filter((mock) => {\n   return mock.apiDetailId === overviewApiResponse.id;\n  }).map((mock) => {\n    return {\n      id: mock.id,\n      name: mock.name,\n      mockUrl: `${projectConfig?.mockPrefixUrl}/${overviewApiResponse.path}`,\n      mockData: JSON.parse(mock.response.bodyData),\n    }\n  });\n\n  const realPath =\n        projectConfig.requestMap?.[overviewApiResponse.url] ||\n        overviewApiResponse.url;\n\n      const ret: ApifoxApiResponse = {\n        id: overviewApiResponse.id,\n        name: overviewApiResponse.name,\n        // desc: res.content.description,\n        method: overviewApiResponse.method,\n        path: overviewApiResponse.url,\n        realPath,\n        // TODO: \u5F85\u8865\u5145\n        creator: `${overviewApiResponse.creatorId}`,\n        mockUrl: `${projectConfig?.mockPrefixUrl}/${overviewApiResponse.path}`,\n        sourceUrl: `${ApifoxBaseUrl}/project/${projectConfig?.id}/apis/api-${overviewApiResponse?.id}`,\n        mockData: scenes[0]?.mockData || {},\n        scenes,\n        creatorId: overviewApiResponse.creatorId,\n      };\n      return ret;\n};\n\n// export const moveApi: userScript.MoveApiRequest<\n//   MoveApiRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     overviewApiResponse: ApifoxOverviewApiResponse;\n//   },\n//   any\n// > = (params, context) => {\n//   const { projectConfig, overviewApiResponse, groupPayload } = params;\n\n//   const payload: any = {\n//     itfId: overviewApiResponse.id,\n//     modId: groupPayload.id,\n//     repositoryId: projectConfig.id,\n//     op: 1,\n//   };\n\n//   return context.fetchJSON<any>(`${ApifoxApiBaseUrl}/interface/move`, {\n//     method: \"POST\",\n//     body: JSON.stringify(payload),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n// };\n\n// export const addApiScene: userScript.AddApiSceneRequest<\n//   AddApiSceneRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     apiResponse: ApifoxApiResponse;\n//   },\n//   ApifoxAddSceneResponse\n// > = (params, context) => {\n//   const { projectConfig, apiResponse, addScenePayload } = params;\n\n//   const payload = {\n//     body: JSON.stringify(addScenePayload.mockData),\n//     creatorId: apiResponse.creatorId,\n//     interfaceId: apiResponse.id,\n//     moduleId: apiResponse.moduleId,\n//     name: addScenePayload.name,\n//     repositoryId: projectConfig.id,\n//     scope: \"response\",\n//   };\n\n//   return context\n//     .fetchJSON<ApifoxOriginalEditSceneResponse>(\n//       `${ApifoxApiBaseUrl}/scene/create`,\n//       {\n//         method: \"POST\",\n//         body: JSON.stringify(payload),\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     )\n//     .then((res) => {\n//       return {\n//         id: res.data.id,\n//       };\n//     });\n// };\n\n// export const updateApiScene: userScript.UpdateApiSceneRequest<\n//   UpdateApiSceneRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     apiResponse: ApifoxApiResponse;\n//     sceneResponse: ApifoxSceneResponse;\n//   },\n//   ApifoxOriginalEditSceneResponse\n// > = (params, context) => {\n//   const { projectConfig, apiResponse, sceneResponse } = params;\n\n//   const payload = {\n//     id: sceneResponse.id,\n//     body: JSON.stringify(sceneResponse.mockData),\n//     creatorId: apiResponse.creatorId,\n//     interfaceId: apiResponse.id,\n//     moduleId: apiResponse.moduleId,\n//     name: sceneResponse.name,\n//     repositoryId: projectConfig.id,\n//     scope: \"response\",\n//   };\n\n//   return context.fetchJSON<ApifoxOriginalEditSceneResponse>(\n//     `${ApifoxApiBaseUrl}/scene/update`,\n//     {\n//       method: \"POST\",\n//       body: JSON.stringify(payload),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     }\n//   );\n// };\n\n// export const deleteApiScene: userScript.DeleteApiSceneRequest<\n//   UpdateApiSceneRequestParams & {\n//     projectConfig: ApifoxProjectConfig;\n//     apiResponse: ApifoxApiResponse;\n//     sceneResponse: ApifoxSceneResponse;\n//   },\n//   any\n// > = (params, context) => {\n//   const { sceneResponse } = params;\n\n//   return context.fetchJSON<any>(\n//     `${ApifoxApiBaseUrl}/scene/remove?id=${sceneResponse.id}`,\n//     {\n//       method: \"GET\",\n//     }\n//   );\n// };\n"],
  "mappings": "AAkDA,IAAMA,EAAgB,yBAChBC,EAAmB,oCAKlB,IAAMC,EAER,CAACC,EAAQC,IAAY,CACxB,GAAM,CAAE,cAAAC,CAAc,EAAIF,EAE1B,OAAOC,EACJ,UACC,oCACA,CACE,QAAS,CACP,eAAgB,GAAGC,EAAc,IACnC,CACF,CACF,EACC,KAAMC,GAAQ,CACb,IAAMC,EAA0B,CAAC,EAC3BC,EAAkBC,GAA8C,CAxE5E,IAAAC,EAyEQ,IAAMC,IAAWD,EAAAL,EAAc,aAAd,YAAAK,EAA2BD,EAAI,QAASA,EAAI,KAC7D,MAAO,CACL,GAAIA,EAAI,GACR,KAAMA,EAAI,KACV,OAAQA,EAAI,OAAO,YAAY,EAC/B,KAAMA,EAAI,KACV,SAAAE,EACA,QAAS,GAAGF,EAAI,gBAChB,QAAS,GAAGJ,GAAA,YAAAA,EAAe,iBAAiBI,EAAI,OAChD,UAAW,GAAGG,aAAyBP,GAAA,YAAAA,EAAe,eAAeI,GAAA,YAAAA,EAAK,KAC1E,UAAWA,EAAI,aACjB,CACF,EAEMI,EAAkBC,GAAyB,CAvFvD,IAAAJ,EAwFQ,QACEA,EAAAI,EAAO,WAAP,YAAAJ,EAAiB,QAAS,GAC1BI,EAAO,SAAS,GAAG,OAAS,WAMhC,EAEMC,EAAoB,CACxBD,EACAE,EAAiB,KACd,CAEDF,EAAO,OAAS,mBAChB,CAACA,EAAO,UACRA,EAAO,SAAS,SAAW,IAIzBD,EAAeC,CAAsB,EACvCP,EAAO,KAAK,CACV,GAAKO,EAAwB,IAC7B,KAAM,GAAGE,MAAWF,EAAO,OAC3B,KAAMA,EAAO,SAAS,IAAKG,GACzBT,EAAgBS,EAAwB,GAAG,CAC7C,CACF,CAAC,EAEDH,EAAO,SAAS,QAASI,GAAgB,CACvCH,EAAkBG,EAAaJ,EAAO,IAAI,CAC5C,CAAC,EAEL,EAEA,OAAAR,EAAI,KAAK,QAASQ,GAAW,CAC3BC,EAAkBD,CAAM,CAC1B,CAAC,EAEM,CACL,OAAAP,CACF,CACF,CAAC,CACL,EAEaY,EAMT,MAAOhB,EAAQC,IAAY,CA5I/B,IAAAM,EAAAU,EA6IE,GAAM,CAAE,cAAAf,EAAe,oBAAAgB,CAAoB,EAAIlB,EAOzCmB,GALQ,MAAMlB,EACnB,UACC,GAAGmB,iCACL,GAEsC,KAAK,OAAQC,GAC3CA,EAAK,cAAgBH,EAAoB,EAChD,EAAE,IAAKG,IACC,CACL,GAAIA,EAAK,GACT,KAAMA,EAAK,KACX,QAAS,GAAGnB,GAAA,YAAAA,EAAe,iBAAiBgB,EAAoB,OAChE,SAAU,KAAK,MAAMG,EAAK,SAAS,QAAQ,CAC7C,EACD,EAEKb,IACAD,EAAAL,EAAc,aAAd,YAAAK,EAA2BW,EAAoB,OAC/CA,EAAoB,IAiBtB,MAf+B,CAC7B,GAAIA,EAAoB,GACxB,KAAMA,EAAoB,KAE1B,OAAQA,EAAoB,OAC5B,KAAMA,EAAoB,IAC1B,SAAAV,EAEA,QAAS,GAAGU,EAAoB,YAChC,QAAS,GAAGhB,GAAA,YAAAA,EAAe,iBAAiBgB,EAAoB,OAChE,UAAW,GAAGT,aAAyBP,GAAA,YAAAA,EAAe,eAAegB,GAAA,YAAAA,EAAqB,KAC1F,WAAUD,EAAAE,EAAO,KAAP,YAAAF,EAAW,WAAY,CAAC,EAClC,OAAAE,EACA,UAAWD,EAAoB,SACjC,CAEN",
  "names": ["ApifoxBaseUrl", "ApifoxApiBaseUrl", "getProject", "params", "context", "projectConfig", "res", "groups", "processApiData", "api", "_a", "realPath", "ApifoxBaseUrl", "isChildrenApis", "folder", "processFolderData", "prefix", "c", "childFolder", "getApi", "_b", "overviewApiResponse", "scenes", "ApifoxApiBaseUrl", "mock"]
}
